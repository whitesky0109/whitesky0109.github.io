{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/tags/TechTagStyled.jsx","webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/components/sidebar/BioStyled.jsx","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinksStyled.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/SidebarStyled.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["IndexPage","data","site","allMarkdownRemark","posts","edges","labels","siteMetadata","nextPage","toString","hasNextPage","totalCount","labelMap","reduce","acc","label","tag","title","keywords","className","map","node","tags","frontmatter","key","id","to","fields","slug","date","excerpt","tech","name","size","color","getTechTags","rel","style","textDecoration","defaultProps","strings","raw","H4Global","createGlobalStyle","slice","TechTagButton","styled","button","Tag","div","Svg","svg","TechTag","img","role","viewBox","xmlns","width","height","href","Array","isArray","n","d","ProfileImgStyled","AuthorBioStyled","h3","SmallStyled","small","Bio","author","tagline","src","whitesky0109Avatar","alt","SideSocialLinks","SocialLinks","contacts","linkedin","github","stackoverflow","freecodecamp","twitter","TechTags","filter","includes","length","push","SiderbarMain","PageLinks","Sidebar","query","render"],"mappings":"2FAAA,kHAaMA,EAAY,SAAC,GAA2C,IAAD,IAAxCC,KAAQC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,kBAC3BC,EAAQD,EAAkBE,MACxBC,EAAWJ,EAAKK,aAAhBD,OAGFE,EAAQ,IAAO,GAAkBC,WACjCC,EAAcP,EAAkBQ,WAFjB,EAIfC,EAAWN,EAAOO,QAAO,SAACC,EAAKC,GAEnC,OADAD,EAAIC,EAAMC,KAAOD,EACVD,IACN,IAgBH,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAM,OACNC,SAAU,CACR,SACA,aACA,QACA,kBACA,OACA,aAGJ,yBAAKC,UAAU,cACb,yBAAKA,UAAU,qBACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,kBACZf,EAAMgB,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACR,OACE,yBAAKE,IAAKH,EAAKI,GAAIN,UAAU,kBAC3B,kBAAC,OAAD,CAAMO,GAAIL,EAAKM,OAAOC,KAAMT,UAAU,aACpC,wBAAIA,UAAU,SAASE,EAAKE,YAAYN,QAE1C,2BAAOE,UAAU,qBACf,uCAEGE,EAAKE,YAAYM,OAGtB,uBAAGV,UAAU,iBAAiBE,EAAKS,SACnC,kBAAC,OAAD,CAAMJ,GAAIL,EAAKM,OAAOC,KAAMT,UAAU,gBACpC,2BAAOA,UAAU,uBAAjB,oBAEF,yBAAKA,UAAU,WAjDT,SAACG,GAAD,OAAUA,EAAKF,KAAI,SAACJ,GACtC,IAAMD,EAAQH,EAASI,GACvB,OAAOD,GACP,kBAAC,IAAD,CACES,IAAKT,EAAMC,IACXA,IAAKD,EAAMC,IACXe,KAAMhB,EAAMgB,KACZC,KAAMjB,EAAMiB,KACZC,KAAMlB,EAAMkB,KACZC,MAAOnB,EAAMmB,WAwCuBC,CAAYb,QAI3CZ,GACC,yBAAKS,UAAU,oBACb,kBAAC,OAAD,CAAMO,GAAIlB,EAAU4B,IAAI,OAAOC,MAAO,CAAEC,eAAgB,SACtD,0BAAMnB,UAAU,aAAhB,qBAchBnB,EAAUuC,aAAe,CACvBtC,KAAM,IA2COD,a,2HC5IqCwC,EAASC,E,YCuB9C,GACbC,SAtBeC,YAAH,IDFsCH,ECEtC,gCDDPC,IACHA,EAAMD,EAAQI,MAAM,IAGtBJ,EAAQC,IAAMA,ECHF,EDILD,ICmBPK,cAnBoBC,IAAOC,OAAV,+EAAGD,CAAH,+GAoBjBE,IAZUF,IAAOG,IAAV,qEAAGH,CAAH,gCACM,qBAAGb,QACP,qBAAGC,SAWZgB,IARUJ,IAAOK,IAAV,qEAAGL,CAAH,eACC,qBAAGZ,UCbPkB,EAAU,SAAC,GAAD,IACdpC,EADc,EACdA,IAAKe,EADS,EACTA,KAAMC,EADG,EACHA,KAAMC,EADH,EACGA,KAAMC,EADT,EACSA,MAAOmB,EADhB,EACgBA,IADhB,OAGd,yBAAKlC,UAAU,sBACb,kBAAC,EAAOuB,SAAR,MACA,kBAAC,OAAD,CAAMhB,GAAE,SAAWV,EAAX,KACN,kBAAC,EAAO6B,cAAR,CAAsB1B,UAAU,cAC9B,uBAAGA,UAAU,YAAeY,EAA5B,KACA,kBAAC,EAAOiB,IAAR,CAAY7B,UAAU,WAAWc,KAAMA,EAAMC,MAAOA,GAClD,kBAAC,EAAOgB,IAAR,CAAYI,KAAK,MAAMC,QAAQ,YAAYC,MAAM,6BAA6BC,MAAOxB,EAAMyB,OAAQzB,EAAMC,MAAOA,GAC9G,+BAAQH,GACA,MAAPsB,GAAe,2BAAOM,KAAMN,EAAKI,MAAOxB,EAAMyB,OAAQzB,IAC9C,MAARD,IACC4B,MAAMC,QAAQ7B,GAETA,EAAKZ,KAAI,SAAC0C,GAAD,OAAO,0BAAMtC,IAAKsC,EAAGC,EAAGD,OACjC,0BAAMC,EAAG/B,WAoB5BoB,EAAQb,aAAe,CACrBvB,IAAK,GACLe,KAAM,GACNC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPmB,IAAK,MAGQD,O,mFClDFY,EAAmBlB,IAAOO,IAAV,8EAAGP,CAAH,+EAOhBmB,EAAkBnB,IAAOoB,GAAV,6EAAGpB,CAAH,wCAKfqB,EAAcrB,IAAOsB,MAAV,yEAAGtB,CAAH,0B,qBCHlBuB,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACV,yBAAKpD,UAAU,iBACb,kBAAC6C,EAAD,CAAkBQ,IAAKC,IAAoBC,IAAI,KAC/C,kBAACT,EAAD,CAAiB9C,UAAU,QAAQmD,GACnC,kBAACH,EAAD,CAAahD,UAAU,cAAcoD,KASzCF,EAAI9B,aAAe,CACjB+B,OAAQ,GACRC,QAAS,IAGIF,Q,YCtBA,GACbM,gBANsB7B,IAAOG,IAAV,yFAAGH,CAAH,sDCaf8B,G,UAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,kBAAC,EAAOF,gBAAR,CAAwBxD,UAAU,wBAChC,uBAAGA,UAAU,qBAAqBwC,KAAMkB,EAASC,UAC/C,0BAAM7D,MAAM,aACV,kBAAC,IAAD,CAAYgB,KAAM,GAAII,MAAO,CAAEH,MAAO,iBAG1C,uBAAGf,UAAU,qBAAqBwC,KAAMkB,EAASE,QAC/C,0BAAM9D,MAAM,UACV,kBAAC,IAAD,CAAgBgB,KAAM,GAAII,MAAO,CAAEH,MAAO,iBAG9C,uBAAGf,UAAU,qBAAqBwC,KAAMkB,EAASG,eAC/C,0BAAM/D,MAAM,kBACV,kBAAC,IAAD,CAAiBgB,KAAM,GAAII,MAAO,CAAEH,MAAO,iBAG/C,uBAAGf,UAAU,qBAAqBwC,KAAMkB,EAASI,cAC/C,0BAAMhE,MAAM,gBACV,kBAAC,IAAD,CAAgBgB,KAAM,GAAII,MAAO,CAAEH,MAAO,iBAG9C,uBAAGf,UAAU,qBAAqBwC,KAAMkB,EAASK,SAC/C,0BAAMjE,MAAM,WACV,kBAAC,IAAD,CAAiBgB,KAAM,GAAII,MAAO,CAAEH,MAAO,oBAUnD0C,EAAYrC,aAAe,CACzBsC,SAAU,IAGGD,Q,YC/CTO,EAAW,SAAC,GAAuB,IAArB7E,EAAoB,EAApBA,OAAQF,EAAY,EAAZA,MACpBQ,EAAW,GACXU,EAAOhB,EAAOO,QAAO,SAACC,EAAKC,GAW/B,OAVAH,EAASG,EAAMC,KAAOD,EAERX,EACXgF,QAAO,mBAA4D,IAA5D,EAAG/D,KAAgBE,YAAYD,KAAK+D,SAAStE,EAAMC,QAC1DsE,OAES,GACVxE,EAAIyE,KAAKxE,EAAMC,KAGVF,IACN,IAiBH,OACE,oCACE,2CACA,yBAAKK,UAAU,WAAuBG,EAlBDF,KAAI,SAACJ,GAC5C,IAAMD,EAAQH,EAASI,GACvB,OAAOD,GACP,kBAACqC,EAAA,EAAD,CACE5B,IAAKR,EACLA,IAAKD,EAAMC,IACXe,KAAMhB,EAAMgB,KACZC,KAAMjB,EAAMiB,KACZC,KAAMlB,EAAMkB,KACZC,MAAOnB,EAAMmB,MACbmB,IAAKtC,EAAMsC,YAkBjB8B,EAAS5C,aAAe,CACtBjC,OAAQ,GACRF,MAAO,IAGM+E,QC3CA,GACbK,aAXmB1C,IAAOG,IAAV,iFAAGH,CAAH,iBAYhB2C,UARgB3C,IAAOG,IAAV,8EAAGH,CAAH,4DCgEA4C,IA5DC,kBACd,kBAAC,cAAD,CACEC,MAAK,aAuCLC,OAAQ,gBAAWrF,EAAX,EAAGL,KAAQK,aAAgBJ,EAA3B,EAA2BA,kBAA3B,OACN,oCACE,kBAAC,EAAOqF,aAAR,CAAqBrE,UAAU,gBAC7B,kBAAC,EAAD,CAAKmD,OAAQ/D,EAAa+D,OAAQC,QAAShE,EAAagE,UACxD,kBAAC,EAAD,CAAaM,SAAUtE,EAAasE,WACpC,kBAAC,EAAOY,UAAR,KACE,kBAAC,OAAD,CAAM/D,GAAG,KAAI,0BAAMP,UAAU,0BAAhB,cACb,kBAAC,OAAD,CAAMO,GAAG,UAAS,0BAAMP,UAAU,0BAAhB,UAClB,kBAAC,OAAD,CAAMO,GAAG,YAAW,0BAAMP,UAAU,0BAAhB,aAEtB,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAUb,OAAQC,EAAaD,OAAQF,MAAOD,EAAkBE","file":"component---src-pages-index-jsx-447e5355caa0fa0c9d3c.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\n/** @type {React.FC} */\nconst IndexPage = ({ data: { site, allMarkdownRemark } }) => {\n  const posts = allMarkdownRemark.edges;\n  const { labels } = site.siteMetadata;\n  const currentPage = 1;\n  const postsPerPage = 3; // see limit in graphql query below\n  const nextPage = `/${(currentPage + 1).toString()}`;\n  const hasNextPage = allMarkdownRemark.totalCount > postsPerPage;\n\n  const labelMap = labels.reduce((acc, label) => {\n    acc[label.tag] = label;\n    return acc;\n  }, {});\n\n  const getTechTags = (tags) => tags.map((tag) => {\n    const label = labelMap[tag];\n    return label && (\n    <TechTag\n      key={label.tag}\n      tag={label.tag}\n      tech={label.tech}\n      name={label.name}\n      size={label.size}\n      color={label.color}\n    />\n    );\n  });\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'blog',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          {posts.map(({ node }) => {\n            const { tags } = node.frontmatter;\n            return (\n              <div key={node.id} className=\"container mt-5\">\n                <Link to={node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>\n                    Posted on\n                    {node.frontmatter.date}\n                  </i>\n                </small>\n                <p className=\"mt-3 d-inline\">{node.excerpt}</p>\n                <Link to={node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n          {hasNextPage && (\n            <div className=\"mt-4 text-center\">\n              <Link to={nextPage} rel=\"next\" style={{ textDecoration: 'none' }}>\n                <span className=\"text-dark\">Next Page â†’</span>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nIndexPage.propTypes = {\n  data: PropTypes.instanceOf(Object),\n};\n\nIndexPage.defaultProps = {\n  data: {},\n};\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 3\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import styled, { createGlobalStyle } from 'styled-components';\n\nconst H4Global = createGlobalStyle`\n  font-family: Raleway;\n`;\n\nconst TechTagButton = styled.button`\n  background: black;\n  border-radius: 20% 0 0 20%;\n  border-color: transparent;\n  font-family: Raleway;\n  font-size: .85rem;\n`;\n\nconst Tag = styled.div`\n  font-size: ${({ size }) => size}px;\n  color: ${({ color }) => color};\n`;\n\nconst Svg = styled.svg`\n  fill: ${({ color }) => color};\n`;\n\nexport default {\n  H4Global,\n  TechTagButton,\n  Tag,\n  Svg,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport Styled from './TechTagStyled';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <Styled.H4Global />\n    <Link to={`/tags/${tag}/`}>\n      <Styled.TechTagButton className=\"text-white\">\n        <p className=\"d-inline\">{`${tech} `}</p>\n        <Styled.Tag className=\"d-inline\" size={size} color={color}>\n          <Styled.Svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} color={color}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                // eslint-disable-next-line react/no-array-index-key\n                ? (name.map((n) => <path key={n} d={n} />))\n                : (<path d={name} />)\n            )}\n          </Styled.Svg>\n        </Styled.Tag>\n      </Styled.TechTagButton>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import styled from 'styled-components';\n\nexport const ProfileImgStyled = styled.img`\n  border-radius: 50%;\n  box-shadow: 1px 1px 3px;\n  min-width: 100px;\n  max-width: 100px;\n`;\n\nexport const AuthorBioStyled = styled.h3`\n  font-family: Raleway;\n  font-size: 2vw;\n`;\n\nexport const SmallStyled = styled.small`\n  font-family: Raleway;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ProfileImgStyled, AuthorBioStyled,\n  SmallStyled,\n} from './BioStyled';\n\nimport whitesky0109Avatar from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <ProfileImgStyled src={whitesky0109Avatar} alt=\"\" />\n    <AuthorBioStyled className=\"mt-2\">{author}</AuthorBioStyled>\n    <SmallStyled className=\"text-muted\">{tagline}</SmallStyled>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import styled from 'styled-components';\n\nconst SideSocialLinks = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport default {\n  SideSocialLinks,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\n\nimport Styled from './SocialLinksStyled';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <Styled.SideSocialLinks className=\"float-left mt-3 mb-3\">\n    <a className=\"text-secondary p-2\" href={contacts.linkedin}>\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.github}>\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.stackoverflow}>\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.freecodecamp}>\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.twitter}>\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </Styled.SideSocialLinks>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelMap = {};\n  const tags = labels.reduce((acc, label) => {\n    labelMap[label.tag] = label;\n\n    const count = posts\n      .filter(({ node }) => node.frontmatter.tags.includes(label.tag) === true)\n      .length;\n\n    if (count > 0) {\n      acc.push(label.tag);\n    }\n\n    return acc;\n  }, []);\n\n  const getTechTags = (tagList) => tagList.map((tag) => {\n    const label = labelMap[tag];\n    return label && (\n    <TechTag\n      key={tag}\n      tag={label.tag}\n      tech={label.tech}\n      name={label.name}\n      size={label.size}\n      color={label.color}\n      img={label.img}\n    />\n    );\n  });\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import styled from 'styled-components';\n\nconst SiderbarMain = styled.div`\n  width: 100%;\n`;\n\nconst PageLinks = styled.div`\n  margin-top: 3rem;\n  padding-top: 4rem;\n  font-family: Raleway;\n`;\n\nexport default {\n  SiderbarMain,\n  PageLinks,\n};\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nimport Styled from './SidebarStyled';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={({ site: { siteMetadata }, allMarkdownRemark }) => (\n      <>\n        <Styled.SiderbarMain className=\"border-right\">\n          <Bio author={siteMetadata.author} tagline={siteMetadata.tagline} />\n          <SocialLinks contacts={siteMetadata.contacts} />\n          <Styled.PageLinks>\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </Styled.PageLinks>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={siteMetadata.labels} posts={allMarkdownRemark.edges} />\n          </div>\n        </Styled.SiderbarMain>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}