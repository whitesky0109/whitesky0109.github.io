{"version":3,"sources":["webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/Sidebar.jsx","webpack:///./src/pages/archive.js"],"names":["TechTag","tag","tech","name","size","color","img","className","to","type","style","fontSize","role","viewBox","xmlns","width","height","fill","href","Array","isArray","map","n","i","key","d","defaultProps","Bio","author","tagline","src","whitesky0109","minWidth","maxWidth","alt","SocialLinks","contacts","linkedin","title","github","stackoverflow","freecodecamp","twitter","TechTags","techTags","labels","posts","tags","count","forEach","node","frontmatter","includes","filter","label","category","push","Sidebar","query","render","data","site","siteMetadata","allMarkdownRemark","edges","ArchivePage","keywords","post","id","fields","slug","date","excerpt","getTechTags"],"mappings":"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","file":"component---src-pages-archive-js-cc13a3230436250774e5.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport './tags.css';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <Link to={`/tags/${tag}/`}>\n      <button type=\"button\" className=\"tech-tag text-white\">\n        <p className=\"d-inline\">\n          {tech}\n          {' '}\n        </p>\n        <div className=\"d-inline\" style={{ fontSize: size, color }}>\n          <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} style={{ fill: `${color}` }}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                ? (name.map((n, i) => <path key={i} d={n} />))\n                : (<path d={name} />)\n            )}\n          </svg>\n        </div>\n      </button>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './sidebar.css';\n\nimport whitesky0109 from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <img\n      src={whitesky0109}\n      style={{ minWidth: '100px', maxWidth: '100px' }}\n      className=\"profile-img\"\n      alt=\"\"\n    />\n    <h3 className=\"mt-2 author-bio\">{author}</h3>\n    <small className=\"text-muted\">{tagline}</small>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <div className=\"side-social-links float-left mt-3 mb-3\">\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.linkedin}\n    >\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.github}\n    >\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.stackoverflow}\n    >\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.freecodecamp}\n    >\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.twitter}\n    >\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </div>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelCount = labels.map(({ tag }) => {\n    let count = 0;\n    posts.forEach(({ node }) => {\n      if (node.frontmatter.tags.includes(tag)) {\n        count += 1;\n      }\n    });\n    return [tag, count];\n  });\n\n  const categories = labelCount.filter((label) => label[1] > 0);\n\n  const tags = categories.map((category) => category[0]);\n\n  const getTechTags = (tagList) => {\n    const techTags = [];\n    tagList.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\nimport './sidebar.css';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={(data) => (\n      <>\n        <div className=\"sidebar-main border-right\">\n          <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n          <SocialLinks contacts={data.site.siteMetadata.contacts} />\n          <div className=\"page-links\">\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </div>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n          </div>\n        </div>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\nconst ArchivePage = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges;\n  const { labels } = data.site.siteMetadata;\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          );\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Archive\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'blog',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          <h2 className=\"heading mt-3\">All Posts</h2>\n          {posts.map(post => {\n            const { tags } = post.node.frontmatter;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>\n                    Posted on\n                    {post.node.frontmatter.date}\n                  </i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query ArchiveQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default ArchivePage;\n"],"sourceRoot":""}