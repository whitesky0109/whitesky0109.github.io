{"version":3,"sources":["webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/templates/tag.js","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["TechTag","tag","tech","name","size","color","img","className","to","type","style","fontSize","role","viewBox","xmlns","width","height","fill","href","Array","isArray","map","n","i","key","d","defaultProps","Tag","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","console","log","totalCount","tagHeader","title","keywords","post","tags","node","frontmatter","id","fields","slug","date","excerpt","techTags","forEach","label","push","getTechTags","Bio","author","tagline","src","whitesky0109","minWidth","maxWidth","alt","SocialLinks","contacts","linkedin","github","stackoverflow","freecodecamp","twitter","TechTags","count","includes","filter","category","Sidebar","query","render"],"mappings":"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","file":"component---src-templates-tag-js-aa8f09ffcb5db9c8785e.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport './tags.css';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <Link to={`/tags/${tag}/`}>\n      <button type=\"button\" className=\"tech-tag text-white\">\n        <p className=\"d-inline\">\n          {tech}\n          {' '}\n        </p>\n        <div className=\"d-inline\" style={{ fontSize: size, color }}>\n          <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} style={{ fill: `${color}` }}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                ? (name.map((n, i) => <path key={i} d={n} />))\n                : (<path d={name} />)\n            )}\n          </svg>\n        </div>\n      </button>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../pages/index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\nconst Tag = ({ pageContext, data }) => {\n  const posts = data.allMarkdownRemark.edges;\n  const { labels } = data.site.siteMetadata;\n  console.log(pageContext.tag);\n  const { tag } = pageContext;\n  const { totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'node.js',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n\n        <div className=\"post-list-main\">\n          <i>\n            <h2 className=\"heading\">{tagHeader}</h2>\n          </i>\n          {posts.map(post => {\n            const { tags } = post.node.frontmatter;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  Posted on {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './sidebar.css';\n\nimport whitesky0109 from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <img\n      src={whitesky0109}\n      style={{ minWidth: '100px', maxWidth: '100px' }}\n      className=\"profile-img\"\n      alt=\"\"\n    />\n    <h3 className=\"mt-2 author-bio\">{author}</h3>\n    <small className=\"text-muted\">{tagline}</small>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <div className=\"side-social-links float-left mt-3 mb-3\">\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.linkedin}\n    >\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.github}\n    >\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.stackoverflow}\n    >\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.freecodecamp}\n    >\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.twitter}\n    >\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </div>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelCount = labels.map(({ tag }) => {\n    let count = 0;\n    posts.forEach(({ node }) => {\n      if (node.frontmatter.tags.includes(tag)) {\n        count += 1;\n      }\n    });\n    return [tag, count];\n  });\n\n  const categories = labelCount.filter((label) => label[1] > 0);\n\n  const tags = categories.map((category) => category[0]);\n\n  const getTechTags = (tagList) => {\n    const techTags = [];\n    tagList.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\nimport './sidebar.css';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={(data) => (\n      <>\n        <div className=\"sidebar-main border-right\">\n          <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n          <SocialLinks contacts={data.site.siteMetadata.contacts} />\n          <div className=\"page-links\">\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </div>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n          </div>\n        </div>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}