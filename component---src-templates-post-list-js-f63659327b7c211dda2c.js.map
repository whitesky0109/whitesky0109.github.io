{"version":3,"sources":["webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/templates/post-list.js","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["TechTag","tag","tech","name","size","color","img","className","to","type","style","fontSize","role","viewBox","xmlns","width","height","fill","href","Array","isArray","map","n","i","key","d","defaultProps","PostList","props","posts","data","allMarkdownRemark","edges","labels","site","siteMetadata","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","title","keywords","post","tags","node","frontmatter","id","fields","slug","date","excerpt","techTags","forEach","label","push","getTechTags","rel","textDecoration","Bio","author","tagline","src","whitesky0109","minWidth","maxWidth","alt","SocialLinks","contacts","linkedin","github","stackoverflow","freecodecamp","twitter","TechTags","count","includes","filter","category","Sidebar","query","render"],"mappings":"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","file":"component---src-templates-post-list-js-f63659327b7c211dda2c.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport './tags.css';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <Link to={`/tags/${tag}/`}>\n      <button type=\"button\" className=\"tech-tag text-white\">\n        <p className=\"d-inline\">\n          {tech}\n          {' '}\n        </p>\n        <div className=\"d-inline\" style={{ fontSize: size, color }}>\n          <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} style={{ fill: `${color}` }}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                ? (name.map((n, i) => <path key={i} d={n} />))\n                : (<path d={name} />)\n            )}\n          </svg>\n        </div>\n      </button>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../pages/index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\nconst PostList = props => {\n  const posts = props.data.allMarkdownRemark.edges;\n  const labels = props.data.site.siteMetadata.labels;\n  const { currentPage, numPages } = props.pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage =\n    currentPage - 1 === 1 ? '/' : '/' + (currentPage - 1).toString();\n  const nextPage = '/' + (currentPage + 1).toString();\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `blog`,\n          `graphql`,\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>Posted on {post.node.frontmatter.date}</i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n          <div className=\"text-center mt-4\">\n            {!isFirst && (\n              <Link to={prevPage} rel=\"prev\" style={{ textDecoration: `none` }}>\n                <span className=\"text-dark\">← Previous Page</span>\n              </Link>\n            )}\n            {!isLast && (\n              <Link to={nextPage} rel=\"next\" style={{ textDecoration: `none` }}>\n                <span className=\"text-dark ml-5\">Next Page →</span>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const listQuery = graphql`\n  query paginateQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PostList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './sidebar.css';\n\nimport whitesky0109 from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <img\n      src={whitesky0109}\n      style={{ minWidth: '100px', maxWidth: '100px' }}\n      className=\"profile-img\"\n      alt=\"\"\n    />\n    <h3 className=\"mt-2 author-bio\">{author}</h3>\n    <small className=\"text-muted\">{tagline}</small>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <div className=\"side-social-links float-left mt-3 mb-3\">\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.linkedin}\n    >\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.github}\n    >\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.stackoverflow}\n    >\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.freecodecamp}\n    >\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a\n      className=\"text-secondary p-2\"\n      href={contacts.twitter}\n    >\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </div>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelCount = labels.map(({ tag }) => {\n    let count = 0;\n    posts.forEach(({ node }) => {\n      if (node.frontmatter.tags.includes(tag)) {\n        count += 1;\n      }\n    });\n    return [tag, count];\n  });\n\n  const categories = labelCount.filter((label) => label[1] > 0);\n\n  const tags = categories.map((category) => category[0]);\n\n  const getTechTags = (tagList) => {\n    const techTags = [];\n    tagList.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\nimport './sidebar.css';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={(data) => (\n      <>\n        <div className=\"sidebar-main border-right\">\n          <Bio author={data.site.siteMetadata.author} tagline={data.site.siteMetadata.tagline} />\n          <SocialLinks contacts={data.site.siteMetadata.contacts} />\n          <div className=\"page-links\">\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </div>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={data.site.siteMetadata.labels} posts={data.allMarkdownRemark.edges} />\n          </div>\n        </div>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}