{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/tags/TechTagStyled.jsx","webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/templates/post-list.js","webpack:///./src/components/sidebar/BioStyled.jsx","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinksStyled.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/SidebarStyled.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["strings","raw","H4Global","createGlobalStyle","slice","TechTagButton","styled","button","Tag","div","size","color","Svg","svg","TechTag","tag","tech","name","img","className","to","role","viewBox","xmlns","width","height","href","Array","isArray","map","n","key","d","defaultProps","PostList","data","pageContext","posts","allMarkdownRemark","edges","labels","site","siteMetadata","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","labelMap","reduce","acc","label","title","keywords","node","tags","frontmatter","id","fields","slug","date","excerpt","getTechTags","rel","style","textDecoration","ProfileImgStyled","AuthorBioStyled","h3","SmallStyled","small","Bio","author","tagline","src","whitesky0109Avatar","alt","SideSocialLinks","SocialLinks","contacts","linkedin","github","stackoverflow","freecodecamp","twitter","TechTags","filter","includes","length","push","SiderbarMain","PageLinks","Sidebar","query","render"],"mappings":"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","file":"component---src-templates-post-list-js-c2d3426a47fcea4d95df.js","sourcesContent":["export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import styled, { createGlobalStyle } from 'styled-components';\n\nconst H4Global = createGlobalStyle`\n  font-family: Raleway;\n`;\n\nconst TechTagButton = styled.button`\n  background: black;\n  border-radius: 20% 0 0 20%;\n  border-color: transparent;\n  font-family: Raleway;\n  font-size: .85rem;\n`;\n\nconst Tag = styled.div`\n  font-size: ${({ size }) => size}px;\n  color: ${({ color }) => color};\n`;\n\nconst Svg = styled.svg`\n  fill: ${({ color }) => color};\n`;\n\nexport default {\n  H4Global,\n  TechTagButton,\n  Tag,\n  Svg,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport Styled from './TechTagStyled';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <Styled.H4Global />\n    <Link to={`/tags/${tag}/`}>\n      <Styled.TechTagButton className=\"text-white\">\n        <p className=\"d-inline\">{`${tech} `}</p>\n        <Styled.Tag className=\"d-inline\" size={size} color={color}>\n          <Styled.Svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} color={color}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                // eslint-disable-next-line react/no-array-index-key\n                ? (name.map((n) => <path key={n} d={n} />))\n                : (<path d={name} />)\n            )}\n          </Styled.Svg>\n        </Styled.Tag>\n      </Styled.TechTagButton>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../pages/index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\n/** @type {React.FC} */\nconst PostList = ({ data, pageContext }) => {\n  const posts = data.allMarkdownRemark.edges;\n  const { labels } = data.site.siteMetadata;\n  const { currentPage, numPages } = pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : `/${(currentPage - 1).toString()}`;\n  const nextPage = `/${(currentPage + 1).toString()}`;\n\n  const labelMap = labels.reduce((acc, label) => {\n    acc[label.tag] = label;\n    return acc;\n  }, {});\n\n  const getTechTags = (tags) => tags.map((tag) => {\n    const label = labelMap[tag];\n    return (\n      label && (\n      <TechTag\n        key={tag}\n        tag={label.tag}\n        tech={label.tech}\n        name={label.name}\n        size={label.size}\n        color={label.color}\n        img={label.img}\n      />\n      )\n    );\n  });\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'blog',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          {posts.map(({ node }) => {\n            const { tags } = node.frontmatter;\n            return (\n              <div key={node.id} className=\"container mt-5\">\n                <Link to={node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>\n                    Posted on\n                    {node.frontmatter.date}\n                  </i>\n                </small>\n                <p className=\"mt-3 d-inline\">{node.excerpt}</p>\n                <Link to={node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n          <div className=\"text-center mt-4\">\n            {!isFirst && (\n              <Link to={prevPage} rel=\"prev\" style={{ textDecoration: 'none' }}>\n                <span className=\"text-dark\">← Previous Page</span>\n              </Link>\n            )}\n            {!isLast && (\n              <Link to={nextPage} rel=\"next\" style={{ textDecoration: 'none' }}>\n                <span className=\"text-dark ml-5\">Next Page →</span>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nPostList.propTypes = {\n  data: PropTypes.instanceOf(Object).isRequired,\n  pageContext: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport const listQuery = graphql`\n  query paginateQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: $limit\n      skip: $skip\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default PostList;\n","import styled from 'styled-components';\n\nexport const ProfileImgStyled = styled.img`\n  border-radius: 50%;\n  box-shadow: 1px 1px 3px;\n  min-width: 100px;\n  max-width: 100px;\n`;\n\nexport const AuthorBioStyled = styled.h3`\n  font-family: Raleway;\n  font-size: 2vw;\n`;\n\nexport const SmallStyled = styled.small`\n  font-family: Raleway;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ProfileImgStyled, AuthorBioStyled,\n  SmallStyled,\n} from './BioStyled';\n\nimport whitesky0109Avatar from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <ProfileImgStyled src={whitesky0109Avatar} alt=\"\" />\n    <AuthorBioStyled className=\"mt-2\">{author}</AuthorBioStyled>\n    <SmallStyled className=\"text-muted\">{tagline}</SmallStyled>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import styled from 'styled-components';\n\nconst SideSocialLinks = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport default {\n  SideSocialLinks,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\n\nimport Styled from './SocialLinksStyled';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <Styled.SideSocialLinks className=\"float-left mt-3 mb-3\">\n    <a className=\"text-secondary p-2\" href={contacts.linkedin}>\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.github}>\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.stackoverflow}>\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.freecodecamp}>\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.twitter}>\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </Styled.SideSocialLinks>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelMap = {};\n  const tags = labels.reduce((acc, label) => {\n    labelMap[label.tag] = label;\n\n    const count = posts\n      .filter(({ node }) => node.frontmatter.tags.includes(label.tag) === true)\n      .length;\n\n    if (count > 0) {\n      acc.push(label.tag);\n    }\n\n    return acc;\n  }, []);\n\n  const getTechTags = (tagList) => tagList.map((tag) => {\n    const label = labelMap[tag];\n    return label && (\n    <TechTag\n      key={tag}\n      tag={label.tag}\n      tech={label.tech}\n      name={label.name}\n      size={label.size}\n      color={label.color}\n      img={label.img}\n    />\n    );\n  });\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import styled from 'styled-components';\n\nconst SiderbarMain = styled.div`\n  width: 100%;\n`;\n\nconst PageLinks = styled.div`\n  margin-top: 3rem;\n  padding-top: 4rem;\n  font-family: Raleway;\n`;\n\nexport default {\n  SiderbarMain,\n  PageLinks,\n};\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nimport Styled from './SidebarStyled';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={({ site: { siteMetadata }, allMarkdownRemark }) => (\n      <>\n        <Styled.SiderbarMain className=\"border-right\">\n          <Bio author={siteMetadata.author} tagline={siteMetadata.tagline} />\n          <SocialLinks contacts={siteMetadata.contacts} />\n          <Styled.PageLinks>\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </Styled.PageLinks>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={siteMetadata.labels} posts={allMarkdownRemark.edges} />\n          </div>\n        </Styled.SiderbarMain>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}