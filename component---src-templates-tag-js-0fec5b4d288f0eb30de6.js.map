{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/tags/TechTagStyled.jsx","webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/templates/tag.js","webpack:///./src/components/sidebar/BioStyled.jsx","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinksStyled.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/SidebarStyled.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["strings","raw","H4GlobalStyled","createGlobalStyle","slice","TechTagButtonStyled","styled","button","TagStyled","div","size","color","SvgStyled","svg","TechTag","tag","tech","name","img","className","to","role","viewBox","xmlns","width","height","href","Array","isArray","map","n","key","d","defaultProps","Tag","pageContext","data","allMarkdownRemark","site","posts","edges","labels","siteMetadata","totalCount","tagHeader","title","keywords","post","tags","node","frontmatter","id","fields","slug","date","excerpt","techTags","forEach","i","label","push","getTechTags","ProfileImgStyled","AuthorBioStyled","h3","SmallStyled","small","Bio","author","tagline","src","whitesky0109Avatar","alt","SideSocialLinksStyled","SocialLinks","contacts","linkedin","style","github","stackoverflow","freecodecamp","twitter","TechTags","count","includes","filter","category","SiderbarMainStyled","PageLinksStyled","Sidebar","query","render"],"mappings":"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","file":"component---src-templates-tag-js-0fec5b4d288f0eb30de6.js","sourcesContent":["export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const H4GlobalStyled = createGlobalStyle`\n  font-family: \"Raleway\";\n`;\n\nexport const TechTagButtonStyled = styled.button`\n  background: black;\n  border-radius: 20% 0 0 20%;\n  border-color: transparent;\n  font-family: \"Raleway\";\n  font-size: .85rem;\n`;\n\nexport const TagStyled = styled.div`\n  font-size: ${({ size }) => size}px;\n  color: ${({ color }) => color};\n`;\n\nexport const SvgStyled = styled.svg`\n  fill: ${({ color }) => color};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport {\n  H4GlobalStyled,\n  TechTagButtonStyled,\n  TagStyled,\n  SvgStyled,\n} from './TechTagStyled';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <H4GlobalStyled />\n    <Link to={`/tags/${tag}/`}>\n      <TechTagButtonStyled className=\"text-white\">\n        <p className=\"d-inline\">{`${tech} `}</p>\n        <TagStyled className=\"d-inline\" size={size} color={color}>\n          <SvgStyled role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} color={color}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                // eslint-disable-next-line react/no-array-index-key\n                ? (name.map((n) => <path key={n} d={n} />))\n                : (<path d={name} />)\n            )}\n          </SvgStyled>\n        </TagStyled>\n      </TechTagButtonStyled>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '../pages/index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\nconst Tag = ({ pageContext, data: { allMarkdownRemark, site } }) => {\n  const posts = allMarkdownRemark.edges;\n  const { labels } = site.siteMetadata;\n  const { tag } = pageContext;\n  const { totalCount } = allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'node.js',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n\n        <div className=\"post-list-main\">\n          <i>\n            <h2 className=\"heading\">{tagHeader}</h2>\n          </i>\n          {posts.map(post => {\n            const { tags } = post.node.frontmatter;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"heading\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  Posted on {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n};\n\nTag.defaultProps = {\n  pageContext: null,\n  data: null,\n};\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tag;\n","import styled from 'styled-components';\n\nexport const ProfileImgStyled = styled.img`\n  border-radius: 50%;\n  box-shadow: 1px 1px 3px;\n  min-width: '100px';\n  max-width: '100px';\n`;\n\nexport const AuthorBioStyled = styled.h3`\n  font-family: 'Raleway';\n  font-size: 2vw;\n`;\n\nexport const SmallStyled = styled.small`\n  font-family: 'Raleway';\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ProfileImgStyled, AuthorBioStyled,\n  SmallStyled,\n} from './BioStyled';\n\nimport whitesky0109Avatar from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <ProfileImgStyled src={whitesky0109Avatar} alt=\"\" />\n    <AuthorBioStyled className=\"mt-2\">{author}</AuthorBioStyled>\n    <SmallStyled className=\"text-muted\">{tagline}</SmallStyled>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import styled from 'styled-components';\n\nconst SideSocialLinksStyled = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport default SideSocialLinksStyled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\n\nimport SideSocialLinksStyled from './SocialLinksStyled';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <SideSocialLinksStyled className=\"float-left mt-3 mb-3\">\n    <a className=\"text-secondary p-2\" href={contacts.linkedin}>\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.github}>\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.stackoverflow}>\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.freecodecamp}>\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.twitter}>\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </SideSocialLinksStyled>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelCount = labels.map(({ tag }) => {\n    let count = 0;\n    posts.forEach(({ node }) => {\n      if (node.frontmatter.tags.includes(tag)) {\n        count += 1;\n      }\n    });\n    return [tag, count];\n  });\n\n  const categories = labelCount.filter((label) => label[1] > 0);\n\n  const tags = categories.map((category) => category[0]);\n\n  const getTechTags = (tagList) => {\n    const techTags = [];\n    tagList.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import styled from 'styled-components';\n\nexport const SiderbarMainStyled = styled.div`\n  width: 100%;\n`;\n\nexport const PageLinksStyled = styled.div`\n  margin-top: 3rem;\n  padding-top: 4rem;\n  font-family: \"Raleway\";\n`;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nimport {\n  SiderbarMainStyled,\n  PageLinksStyled,\n} from './SidebarStyled';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={({ site: { siteMetadata }, allMarkdownRemark }) => (\n      <>\n        <SiderbarMainStyled className=\"border-right\">\n          <Bio author={siteMetadata.author} tagline={siteMetadata.tagline} />\n          <SocialLinks contacts={siteMetadata.contacts} />\n          <PageLinksStyled>\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </PageLinksStyled>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={siteMetadata.labels} posts={allMarkdownRemark.edges} />\n          </div>\n        </SiderbarMainStyled>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}