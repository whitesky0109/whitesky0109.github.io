{"version":3,"sources":["webpack:///./src/pages/index.jsx","webpack:///./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js","webpack:///./src/components/tags/TechTagStyled.jsx","webpack:///./src/components/tags/TechTag.jsx","webpack:///./src/components/sidebar/BioStyled.jsx","webpack:///./src/components/sidebar/Bio.jsx","webpack:///./src/components/sidebar/SocialLinksStyled.jsx","webpack:///./src/components/sidebar/SocialLinks.jsx","webpack:///./src/components/sidebar/TechTags.jsx","webpack:///./src/components/sidebar/SidebarStyled.jsx","webpack:///./src/components/sidebar/Sidebar.jsx"],"names":["IndexPage","data","site","allMarkdownRemark","posts","edges","labels","siteMetadata","nextPage","toString","hasNextPage","totalCount","title","keywords","className","map","post","tags","node","frontmatter","key","id","to","fields","slug","date","excerpt","techTags","forEach","tag","label","push","tech","name","size","color","getTechTags","rel","style","textDecoration","defaultProps","strings","raw","H4GlobalStyled","createGlobalStyle","slice","TechTagButtonStyled","styled","button","TagStyled","div","SvgStyled","svg","TechTag","img","role","viewBox","xmlns","width","height","href","Array","isArray","n","d","ProfileImgStyled","AuthorBioStyled","h3","SmallStyled","small","Bio","author","tagline","src","whitesky0109Avatar","alt","SideSocialLinksStyled","SocialLinks","contacts","linkedin","github","stackoverflow","freecodecamp","twitter","TechTags","count","includes","filter","category","i","SiderbarMainStyled","PageLinksStyled","Sidebar","query","render"],"mappings":"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","file":"component---src-pages-index-jsx-6cfd4bb55297f10ed29d.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link, graphql } from 'gatsby';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Sidebar from '../components/sidebar/Sidebar';\nimport TechTag from '../components/tags/TechTag';\n\n/** @type {React.FC} */\nconst IndexPage = ({ data: { site, allMarkdownRemark } }) => {\n  const posts = allMarkdownRemark.edges;\n  const { labels } = site.siteMetadata;\n  const currentPage = 1;\n  const postsPerPage = 3; // see limit in graphql query below\n  const nextPage = `/${(currentPage + 1).toString()}`;\n  const hasNextPage = allMarkdownRemark.totalCount > postsPerPage;\n\n  const getTechTags = (tags) => {\n    const techTags = [];\n    tags.forEach((tag) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={label.tag}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />,\n          );\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          'gatsby',\n          'javascript',\n          'react',\n          'web development',\n          'blog',\n          'graphql',\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar px-4 py-2\">\n          <Sidebar />\n        </div>\n        <div className=\"post-list-main\">\n          {posts.map((post) => {\n            const { tags } = post.node.frontmatter;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  <i>\n                    Posted on\n                    {post.node.frontmatter.date}\n                  </i>\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <Link to={post.node.fields.slug} className=\"text-primary\">\n                  <small className=\"d-inline-block ml-3\"> Read full post</small>\n                </Link>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n          {hasNextPage && (\n            <div className=\"mt-4 text-center\">\n              <Link to={nextPage} rel=\"next\" style={{ textDecoration: 'none' }}>\n                <span className=\"text-dark\">Next Page â†’</span>\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nIndexPage.propTypes = {\n  data: PropTypes.instanceOf(Object),\n};\n\nIndexPage.defaultProps = {\n  data: {},\n};\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 3\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { published: { eq: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexPage;\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}","import styled, { createGlobalStyle } from 'styled-components';\n\nexport const H4GlobalStyled = createGlobalStyle`\n  font-family: \"Raleway\";\n`;\n\nexport const TechTagButtonStyled = styled.button`\n  background: black;\n  border-radius: 20% 0 0 20%;\n  border-color: transparent;\n  font-family: \"Raleway\";\n  font-size: .85rem;\n`;\n\nexport const TagStyled = styled.div`\n  font-size: ${({ size }) => size}px;\n  color: ${({ color }) => color};\n`;\n\nexport const SvgStyled = styled.svg`\n  fill: ${({ color }) => color};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport {\n  H4GlobalStyled,\n  TechTagButtonStyled,\n  TagStyled,\n  SvgStyled,\n} from './TechTagStyled';\n\nconst TechTag = ({\n  tag, tech, name, size, color, img,\n}) => (\n  <div className=\"d-inline-block p-1\">\n    <H4GlobalStyled />\n    <Link to={`/tags/${tag}/`}>\n      <TechTagButtonStyled className=\"text-white\">\n        <p className=\"d-inline\">{`${tech} `}</p>\n        <TagStyled className=\"d-inline\" size={size} color={color}>\n          <SvgStyled role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" width={size} height={size} color={color}>\n            <title>{tech}</title>\n            {img != null && <image href={img} width={size} height={size} />}\n            {name != null && (\n              Array.isArray(name)\n                // eslint-disable-next-line react/no-array-index-key\n                ? (name.map((n) => <path key={n} d={n} />))\n                : (<path d={name} />)\n            )}\n          </SvgStyled>\n        </TagStyled>\n      </TechTagButtonStyled>\n    </Link>\n\n  </div>\n\n);\n\nTechTag.propTypes = {\n  tag: PropTypes.string,\n  tech: PropTypes.string,\n  name: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  color: PropTypes.string,\n  img: PropTypes.string,\n};\n\nTechTag.defaultProps = {\n  tag: '',\n  tech: '',\n  name: '',\n  size: 20,\n  color: '',\n  img: null,\n};\n\nexport default TechTag;\n","import styled from 'styled-components';\n\nexport const ProfileImgStyled = styled.img`\n  border-radius: 50%;\n  box-shadow: 1px 1px 3px;\n  min-width: '100px';\n  max-width: '100px';\n`;\n\nexport const AuthorBioStyled = styled.h3`\n  font-family: 'Raleway';\n  font-size: 2vw;\n`;\n\nexport const SmallStyled = styled.small`\n  font-family: 'Raleway';\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ProfileImgStyled, AuthorBioStyled,\n  SmallStyled,\n} from './BioStyled';\n\nimport whitesky0109Avatar from '../../images/whitesky0109.jpg';\n\n/** @type {React.FC} */\nconst Bio = ({ author, tagline }) => (\n  <div className=\"bio-main w-75\">\n    <ProfileImgStyled src={whitesky0109Avatar} alt=\"\" />\n    <AuthorBioStyled className=\"mt-2\">{author}</AuthorBioStyled>\n    <SmallStyled className=\"text-muted\">{tagline}</SmallStyled>\n  </div>\n);\n\nBio.propTypes = {\n  author: PropTypes.string,\n  tagline: PropTypes.string,\n};\n\nBio.defaultProps = {\n  author: '',\n  tagline: '',\n};\n\nexport default Bio;\n","import styled from 'styled-components';\n\nconst SideSocialLinksStyled = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n`;\n\nexport default SideSocialLinksStyled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  FaLinkedin,\n  FaGithubSquare,\n  FaStackOverflow,\n  FaFreeCodeCamp,\n  FaTwitterSquare,\n} from 'react-icons/fa';\n\nimport SideSocialLinksStyled from './SocialLinksStyled';\nimport './sidebar.css';\n\n/** @type {React.FC} */\nconst SocialLinks = ({ contacts }) => (\n  <SideSocialLinksStyled className=\"float-left mt-3 mb-3\">\n    <a className=\"text-secondary p-2\" href={contacts.linkedin}>\n      <span title=\"Linked In\">\n        <FaLinkedin size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.github}>\n      <span title=\"GitHub\">\n        <FaGithubSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.stackoverflow}>\n      <span title=\"Stack Overflow\">\n        <FaStackOverflow size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.freecodecamp}>\n      <span title=\"freeCodeCamp\">\n        <FaFreeCodeCamp size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n    <a className=\"text-secondary p-2\" href={contacts.twitter}>\n      <span title=\"Twitter\">\n        <FaTwitterSquare size={26} style={{ color: 'secondary' }} />\n      </span>\n    </a>\n  </SideSocialLinksStyled>\n);\n\nSocialLinks.propTypes = {\n  contacts: PropTypes.instanceOf(Object),\n};\n\nSocialLinks.defaultProps = {\n  contacts: {},\n};\n\nexport default SocialLinks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TechTag from '../tags/TechTag';\n\n/** @type {React.FC} */\nconst TechTags = ({ labels, posts }) => {\n  const labelCount = labels.map(({ tag }) => {\n    let count = 0;\n    posts.forEach(({ node }) => {\n      if (node.frontmatter.tags.includes(tag)) {\n        count += 1;\n      }\n    });\n    return [tag, count];\n  });\n\n  const categories = labelCount.filter((label) => label[1] > 0);\n\n  const tags = categories.map((category) => category[0]);\n\n  const getTechTags = (tagList) => {\n    const techTags = [];\n    tagList.forEach((tag, i) => {\n      labels.forEach((label) => {\n        if (tag === label.tag) {\n          techTags.push(<TechTag key={i} {...label} />);\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <>\n      <h4>Tech Topics</h4>\n      <div className=\"d-block\">{getTechTags(tags)}</div>\n    </>\n  );\n};\n\nTechTags.propTypes = {\n  labels: PropTypes.arrayOf(Object),\n  posts: PropTypes.arrayOf(Object),\n};\n\nTechTags.defaultProps = {\n  labels: [],\n  posts: [],\n};\n\nexport default TechTags;\n","import styled from 'styled-components';\n\nexport const SiderbarMainStyled = styled.div`\n  width: 100%;\n`;\n\nexport const PageLinksStyled = styled.div`\n  margin-top: 3rem;\n  padding-top: 4rem;\n  font-family: \"Raleway\";\n`;\n","import React from 'react';\nimport { StaticQuery, graphql, Link } from 'gatsby';\n\nimport Bio from './Bio';\n\nimport SocialLinks from './SocialLinks';\nimport TechTags from './TechTags';\n\nimport {\n  SiderbarMainStyled,\n  PageLinksStyled,\n} from './SidebarStyled';\n\nconst Sidebar = () => (\n  <StaticQuery\n    query={graphql`\n                query SiteBioQuery {\n                    site {\n                        siteMetadata {\n                            title\n                            tagline\n                            author\n                            contacts {\n                                linkedin\n                                github\n                                stackoverflow\n                                freecodecamp\n                                twitter\n                            }\n                            labels {\n                                tag\n                                tech\n                                name \n                                size \n                                color\n                                img\n                            }\n                        }\n                    }\n                    allMarkdownRemark(\n                        limit: 10\n                        sort: { fields: [frontmatter___date], order: DESC }\n                        filter: { frontmatter: { published: { eq: true } } }\n                    ) {\n                        edges {\n                            node {\n                                frontmatter {\n                                    tags\n                                }\n                            }\n                        }\n                    }\n                }\n            `}\n    render={({ site: { siteMetadata }, allMarkdownRemark }) => (\n      <>\n        <SiderbarMainStyled className=\"border-right\">\n          <Bio author={siteMetadata.author} tagline={siteMetadata.tagline} />\n          <SocialLinks contacts={siteMetadata.contacts} />\n          <PageLinksStyled>\n            <Link to=\"/\"><span className=\"text-dark d-block py-1\">Blog Home</span></Link>\n            <Link to=\"/about\"><span className=\"text-dark d-block py-1\">About</span></Link>\n            <Link to=\"/archive\"><span className=\"text-dark d-block py-1\">Archive</span></Link>\n          </PageLinksStyled>\n          <div className=\"tech-tags mt-4\">\n            <TechTags labels={siteMetadata.labels} posts={allMarkdownRemark.edges} />\n          </div>\n        </SiderbarMainStyled>\n      </>\n    )}\n  />\n);\n\nexport default Sidebar;\n"],"sourceRoot":""}